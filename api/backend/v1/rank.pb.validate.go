// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backend/v1/rank.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRankListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRankListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRankListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRankListRequestMultiError, or nil if none found.
func (m *GetRankListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRankListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := GetRankListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := GetRankListRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRankListRequestMultiError(errors)
	}

	return nil
}

// GetRankListRequestMultiError is an error wrapping multiple validation errors
// returned by GetRankListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRankListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRankListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRankListRequestMultiError) AllErrors() []error { return m }

// GetRankListRequestValidationError is the validation error returned by
// GetRankListRequest.Validate if the designated constraints aren't met.
type GetRankListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRankListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRankListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRankListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRankListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRankListRequestValidationError) ErrorName() string {
	return "GetRankListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRankListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRankListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRankListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRankListRequestValidationError{}

// Validate checks the field values on GetRankListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRankListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRankListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRankListResponseMultiError, or nil if none found.
func (m *GetRankListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRankListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRankListResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRankListResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRankListResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetRankListResponseMultiError(errors)
	}

	return nil
}

// GetRankListResponseMultiError is an error wrapping multiple validation
// errors returned by GetRankListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRankListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRankListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRankListResponseMultiError) AllErrors() []error { return m }

// GetRankListResponseValidationError is the validation error returned by
// GetRankListResponse.Validate if the designated constraints aren't met.
type GetRankListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRankListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRankListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRankListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRankListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRankListResponseValidationError) ErrorName() string {
	return "GetRankListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRankListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRankListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRankListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRankListResponseValidationError{}

// Validate checks the field values on RankUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RankUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RankUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RankUserMultiError, or nil
// if none found.
func (m *RankUser) ValidateAll() error {
	return m.validate(true)
}

func (m *RankUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RankUserValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Photo

	// no validation rules for Username

	// no validation rules for Rating

	// no validation rules for Number

	if len(errors) > 0 {
		return RankUserMultiError(errors)
	}

	return nil
}

// RankUserMultiError is an error wrapping multiple validation errors returned
// by RankUser.ValidateAll() if the designated constraints aren't met.
type RankUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RankUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RankUserMultiError) AllErrors() []error { return m }

// RankUserValidationError is the validation error returned by
// RankUser.Validate if the designated constraints aren't met.
type RankUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RankUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RankUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RankUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RankUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RankUserValidationError) ErrorName() string { return "RankUserValidationError" }

// Error satisfies the builtin error interface
func (e RankUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRankUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RankUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RankUserValidationError{}
