// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.2
// source: backend/v1/record.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRecordServiceGetRecordList = "/kob_kratos.v1.RecordService/GetRecordList"

type RecordServiceHTTPServer interface {
	GetRecordList(context.Context, *GetRecordListRequest) (*GetRecordListResponse, error)
}

func RegisterRecordServiceHTTPServer(s *http.Server, srv RecordServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/record/getlist", _RecordService_GetRecordList0_HTTP_Handler(srv))
}

func _RecordService_GetRecordList0_HTTP_Handler(srv RecordServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRecordListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRecordServiceGetRecordList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRecordList(ctx, req.(*GetRecordListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRecordListResponse)
		return ctx.Result(200, reply)
	}
}

type RecordServiceHTTPClient interface {
	GetRecordList(ctx context.Context, req *GetRecordListRequest, opts ...http.CallOption) (rsp *GetRecordListResponse, err error)
}

type RecordServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRecordServiceHTTPClient(client *http.Client) RecordServiceHTTPClient {
	return &RecordServiceHTTPClientImpl{client}
}

func (c *RecordServiceHTTPClientImpl) GetRecordList(ctx context.Context, in *GetRecordListRequest, opts ...http.CallOption) (*GetRecordListResponse, error) {
	var out GetRecordListResponse
	pattern := "/api/record/getlist"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRecordServiceGetRecordList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
