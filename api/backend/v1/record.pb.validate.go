// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backend/v1/record.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRecordListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecordListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecordListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecordListRequestMultiError, or nil if none found.
func (m *GetRecordListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecordListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPage()) < 1 {
		err := GetRecordListRequestValidationError{
			field:  "Page",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRecordListRequestMultiError(errors)
	}

	return nil
}

// GetRecordListRequestMultiError is an error wrapping multiple validation
// errors returned by GetRecordListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRecordListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecordListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecordListRequestMultiError) AllErrors() []error { return m }

// GetRecordListRequestValidationError is the validation error returned by
// GetRecordListRequest.Validate if the designated constraints aren't met.
type GetRecordListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecordListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecordListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecordListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecordListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecordListRequestValidationError) ErrorName() string {
	return "GetRecordListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecordListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecordListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecordListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecordListRequestValidationError{}

// Validate checks the field values on GetRecordListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecordListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecordListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecordListResponseMultiError, or nil if none found.
func (m *GetRecordListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecordListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRecordListResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRecordListResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRecordListResponseValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RecordsCount

	if len(errors) > 0 {
		return GetRecordListResponseMultiError(errors)
	}

	return nil
}

// GetRecordListResponseMultiError is an error wrapping multiple validation
// errors returned by GetRecordListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRecordListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecordListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecordListResponseMultiError) AllErrors() []error { return m }

// GetRecordListResponseValidationError is the validation error returned by
// GetRecordListResponse.Validate if the designated constraints aren't met.
type GetRecordListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecordListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecordListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecordListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecordListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecordListResponseValidationError) ErrorName() string {
	return "GetRecordListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecordListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecordListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecordListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecordListResponseValidationError{}

// Validate checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Record) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecordMultiError, or nil if none found.
func (m *Record) ValidateAll() error {
	return m.validate(true)
}

func (m *Record) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for APhoto

	// no validation rules for AUsername

	// no validation rules for BPhoto

	// no validation rules for BUsername

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetRecord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordValidationError{
				field:  "Record",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecordMultiError(errors)
	}

	return nil
}

// RecordMultiError is an error wrapping multiple validation errors returned by
// Record.ValidateAll() if the designated constraints aren't met.
type RecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordMultiError) AllErrors() []error { return m }

// RecordValidationError is the validation error returned by Record.Validate if
// the designated constraints aren't met.
type RecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordValidationError) ErrorName() string { return "RecordValidationError" }

// Error satisfies the builtin error interface
func (e RecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordValidationError{}

// Validate checks the field values on GameRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameRecordMultiError, or
// nil if none found.
func (m *GameRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *GameRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GameRecordValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAId() <= 0 {
		err := GameRecordValidationError{
			field:  "AId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ASx

	// no validation rules for ASy

	if m.GetBId() <= 0 {
		err := GameRecordValidationError{
			field:  "BId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BSx

	// no validation rules for BSy

	// no validation rules for ASteps

	// no validation rules for BSteps

	// no validation rules for Map

	// no validation rules for Loser

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GameRecordMultiError(errors)
	}

	return nil
}

// GameRecordMultiError is an error wrapping multiple validation errors
// returned by GameRecord.ValidateAll() if the designated constraints aren't met.
type GameRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameRecordMultiError) AllErrors() []error { return m }

// GameRecordValidationError is the validation error returned by
// GameRecord.Validate if the designated constraints aren't met.
type GameRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameRecordValidationError) ErrorName() string { return "GameRecordValidationError" }

// Error satisfies the builtin error interface
func (e GameRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameRecordValidationError{}
