// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backend/v1/bot.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddBotRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddBotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddBotRequestMultiError, or
// nil if none found.
func (m *AddBotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := AddBotRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := AddBotRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := AddBotRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := AddBotRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddBotRequestMultiError(errors)
	}

	return nil
}

// AddBotRequestMultiError is an error wrapping multiple validation errors
// returned by AddBotRequest.ValidateAll() if the designated constraints
// aren't met.
type AddBotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBotRequestMultiError) AllErrors() []error { return m }

// AddBotRequestValidationError is the validation error returned by
// AddBotRequest.Validate if the designated constraints aren't met.
type AddBotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBotRequestValidationError) ErrorName() string { return "AddBotRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddBotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBotRequestValidationError{}

// Validate checks the field values on GetBotListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBotListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBotListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBotListRequestMultiError, or nil if none found.
func (m *GetBotListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBotListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetBotListRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBotListRequestMultiError(errors)
	}

	return nil
}

// GetBotListRequestMultiError is an error wrapping multiple validation errors
// returned by GetBotListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBotListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBotListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBotListRequestMultiError) AllErrors() []error { return m }

// GetBotListRequestValidationError is the validation error returned by
// GetBotListRequest.Validate if the designated constraints aren't met.
type GetBotListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBotListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBotListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBotListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBotListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBotListRequestValidationError) ErrorName() string {
	return "GetBotListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBotListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBotListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBotListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBotListRequestValidationError{}

// Validate checks the field values on GetBotListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBotListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBotListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBotListResponseMultiError, or nil if none found.
func (m *GetBotListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBotListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBotList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBotListResponseValidationError{
						field:  fmt.Sprintf("BotList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBotListResponseValidationError{
						field:  fmt.Sprintf("BotList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBotListResponseValidationError{
					field:  fmt.Sprintf("BotList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBotListResponseMultiError(errors)
	}

	return nil
}

// GetBotListResponseMultiError is an error wrapping multiple validation errors
// returned by GetBotListResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBotListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBotListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBotListResponseMultiError) AllErrors() []error { return m }

// GetBotListResponseValidationError is the validation error returned by
// GetBotListResponse.Validate if the designated constraints aren't met.
type GetBotListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBotListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBotListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBotListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBotListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBotListResponseValidationError) ErrorName() string {
	return "GetBotListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBotListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBotListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBotListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBotListResponseValidationError{}

// Validate checks the field values on Bot with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Bot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bot with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BotMultiError, or nil if none found.
func (m *Bot) ValidateAll() error {
	return m.validate(true)
}

func (m *Bot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := BotValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := BotValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Code

	// no validation rules for CreateTime

	// no validation rules for ModifyTime

	if len(errors) > 0 {
		return BotMultiError(errors)
	}

	return nil
}

// BotMultiError is an error wrapping multiple validation errors returned by
// Bot.ValidateAll() if the designated constraints aren't met.
type BotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BotMultiError) AllErrors() []error { return m }

// BotValidationError is the validation error returned by Bot.Validate if the
// designated constraints aren't met.
type BotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BotValidationError) ErrorName() string { return "BotValidationError" }

// Error satisfies the builtin error interface
func (e BotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BotValidationError{}

// Validate checks the field values on UpdateBotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBotRequestMultiError, or nil if none found.
func (m *UpdateBotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if utf8.RuneCountInString(m.GetBotId()) < 1 {
		err := UpdateBotRequestValidationError{
			field:  "BotId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := UpdateBotRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := UpdateBotRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := UpdateBotRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateBotRequestMultiError(errors)
	}

	return nil
}

// UpdateBotRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBotRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBotRequestMultiError) AllErrors() []error { return m }

// UpdateBotRequestValidationError is the validation error returned by
// UpdateBotRequest.Validate if the designated constraints aren't met.
type UpdateBotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBotRequestValidationError) ErrorName() string { return "UpdateBotRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBotRequestValidationError{}

// Validate checks the field values on DeleteBotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteBotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBotRequestMultiError, or nil if none found.
func (m *DeleteBotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := DeleteBotRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBotId()) < 1 {
		err := DeleteBotRequestValidationError{
			field:  "BotId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteBotRequestMultiError(errors)
	}

	return nil
}

// DeleteBotRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteBotRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteBotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBotRequestMultiError) AllErrors() []error { return m }

// DeleteBotRequestValidationError is the validation error returned by
// DeleteBotRequest.Validate if the designated constraints aren't met.
type DeleteBotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBotRequestValidationError) ErrorName() string { return "DeleteBotRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteBotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBotRequestValidationError{}
