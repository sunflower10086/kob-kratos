// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.2
// source: backend/v1/bot.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBotServiceAddBot = "/kob_kratos.v1.BotService/AddBot"
const OperationBotServiceDeleteBot = "/kob_kratos.v1.BotService/DeleteBot"
const OperationBotServiceGetBotList = "/kob_kratos.v1.BotService/GetBotList"
const OperationBotServiceUpdateBot = "/kob_kratos.v1.BotService/UpdateBot"

type BotServiceHTTPServer interface {
	AddBot(context.Context, *AddBotRequest) (*emptypb.Empty, error)
	DeleteBot(context.Context, *DeleteBotRequest) (*emptypb.Empty, error)
	GetBotList(context.Context, *GetBotListRequest) (*GetBotListResponse, error)
	UpdateBot(context.Context, *UpdateBotRequest) (*emptypb.Empty, error)
}

func RegisterBotServiceHTTPServer(s *http.Server, srv BotServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/user/bot/add", _BotService_AddBot0_HTTP_Handler(srv))
	r.GET("/api/user/bot/getlist", _BotService_GetBotList0_HTTP_Handler(srv))
	r.POST("/api/user/bot/update", _BotService_UpdateBot0_HTTP_Handler(srv))
	r.POST("/api/user/bot/remove", _BotService_DeleteBot0_HTTP_Handler(srv))
}

func _BotService_AddBot0_HTTP_Handler(srv BotServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddBotRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBotServiceAddBot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddBot(ctx, req.(*AddBotRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _BotService_GetBotList0_HTTP_Handler(srv BotServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBotListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBotServiceGetBotList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBotList(ctx, req.(*GetBotListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBotListResponse)
		return ctx.Result(200, reply)
	}
}

func _BotService_UpdateBot0_HTTP_Handler(srv BotServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBotRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBotServiceUpdateBot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBot(ctx, req.(*UpdateBotRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _BotService_DeleteBot0_HTTP_Handler(srv BotServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBotRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBotServiceDeleteBot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBot(ctx, req.(*DeleteBotRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type BotServiceHTTPClient interface {
	AddBot(ctx context.Context, req *AddBotRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteBot(ctx context.Context, req *DeleteBotRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetBotList(ctx context.Context, req *GetBotListRequest, opts ...http.CallOption) (rsp *GetBotListResponse, err error)
	UpdateBot(ctx context.Context, req *UpdateBotRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type BotServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewBotServiceHTTPClient(client *http.Client) BotServiceHTTPClient {
	return &BotServiceHTTPClientImpl{client}
}

func (c *BotServiceHTTPClientImpl) AddBot(ctx context.Context, in *AddBotRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/user/bot/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBotServiceAddBot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BotServiceHTTPClientImpl) DeleteBot(ctx context.Context, in *DeleteBotRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/user/bot/remove"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBotServiceDeleteBot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BotServiceHTTPClientImpl) GetBotList(ctx context.Context, in *GetBotListRequest, opts ...http.CallOption) (*GetBotListResponse, error) {
	var out GetBotListResponse
	pattern := "/api/user/bot/getlist"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBotServiceGetBotList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BotServiceHTTPClientImpl) UpdateBot(ctx context.Context, in *UpdateBotRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/user/bot/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBotServiceUpdateBot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
