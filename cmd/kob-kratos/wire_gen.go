// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"kob-kratos/internal/biz"
	"kob-kratos/internal/conf"
	"kob-kratos/internal/data"
	"kob-kratos/internal/server"
	"kob-kratos/internal/service/bot"
	"kob-kratos/internal/service/rank"
	"kob-kratos/internal/service/record"
	"kob-kratos/internal/service/user"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db, cleanup, err := data.NewPostgresDB(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup2, err := data.NewData(confData, logger, db)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userRepository := data.NewUserRepository(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepository, logger)
	service := user.NewService(userUsecase, logger)
	recordUsecase := biz.NewRecordUsecase(logger)
	recordService := record.NewService(recordUsecase, logger)
	rankUsecase := biz.NewRankUsecase(logger)
	rankService := rank.NewService(rankUsecase, logger)
	botUsecase := biz.NewBotUsecase(logger)
	botService := bot.NewService(botUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, service, recordService, rankService, botService, logger)
	httpServer := server.NewHTTPServer(confServer, service, recordService, rankService, botService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
